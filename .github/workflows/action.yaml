name: fserv-template-ci
on:
  push:
    branches:
      - "*"
  workflow_dispatch:
    inputs:
      job:
        description: '寻找要执行的工作流'
        required: true
        default: 'build'
        type: choice
        options:
          - build
          - docker-build
          - release
      release_version:
        required: false
        description: '发布版本号'
        type: string
      release_note:
        required: false
        description: '发布说明'
        type: string
env:
  GO_VERSION: '1.24'
  GOLANGCI_LINT_VERSION: 'v2.2.2'
  GO_PROXY: 'https://goproxy.cn,direct'

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v4
      - name: 'Set up Go'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: 'Cache go modules'
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: 'golangci-lint'
        uses: golangci/golangci-lint-action@v8
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}

  test:
    name: test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v4
      - name: 'Set up Go'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: 'Cache go modules'
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: 'Install dependencies'
        run: |
          go env -w GOPROXY=${{env.GO_PROXY}}
          go mod download
      - name: 'Run tests'
        run: |
          go test -v -coverprofile=coverage.txt -covermode=atomic ./...
